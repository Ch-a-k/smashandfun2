import { NextResponse } from 'next/server';

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è fetch
const fetchWithTimeout = async (url: string, options: RequestInit, timeout = 8000) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeout);
  
  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    throw error;
  }
};

export async function POST(req: Request) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('Sprawdzanie zmiennych ≈õrodowiskowych:', {
    hasBotToken: !!TELEGRAM_BOT_TOKEN,
    hasChatId: !!TELEGRAM_CHAT_ID,
  });

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('Brak zmiennych ≈õrodowiskowych dla Telegram API');
    return NextResponse.json(
      { error: 'B≈ÇƒÖd konfiguracji: Brak wymaganych zmiennych ≈õrodowiskowych' },
      { status: 500 }
    );
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç JSON
    let data;
    try {
      data = await req.json();
    } catch (parseError) {
      console.error('B≈ÇƒÖd podczas analizy JSON z ≈ºƒÖdania:', parseError);
      return NextResponse.json(
        { error: 'Nieprawid≈Çowe dane wej≈õciowe: oczekiwano formatu JSON' },
        { status: 400 }
      );
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const { name, phone, email, subject, message } = data;
    
    if (!name || !email || !subject || !message) {
      console.error('Niepe≈Çne dane formularza:', { name, email, subject });
      return NextResponse.json(
        { error: 'Brak wymaganych p√≥l' },
        { status: 400 }
      );
    }

    console.log('Otrzymane dane formularza:', {
      name,
      email,
      subject,
    });

    const text = `
üì® Nowa wiadomo≈õƒá ze strony:

üë§ Imiƒô i nazwisko: ${name}
üì± Telefon: ${phone || 'Nie podano'}
üìß Email: ${email}
üìù Temat: ${subject}

üí¨ Wiadomo≈õƒá:
${message}
    `;

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
    console.log('Wysy≈Çanie ≈ºƒÖdania do Telegram API');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetchWithTimeout –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ fetch
    try {
      const response = await fetchWithTimeout(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text,
          parse_mode: 'HTML',
        }),
        cache: 'no-store',
      }, 8000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ JSON
      const responseText = await response.text();
      console.log('Odpowied≈∫ od Telegram API (text):', responseText);
      
      let responseData;
      try {
        responseData = JSON.parse(responseText);
        console.log('Odpowied≈∫ Telegram API (JSON):', responseData);
      } catch (jsonError) {
        console.error('B≈ÇƒÖd podczas przetwarzania odpowiedzi JSON:', jsonError);
        responseData = { text: responseText };
      }

      if (!response.ok) {
        const errorMessage = `Nie uda≈Ço siƒô wys≈Çaƒá wiadomo≈õci: ${response.status} ${response.statusText}`;
        console.error(errorMessage, responseData);
        
        return NextResponse.json(
          { 
            error: errorMessage,
            details: responseData
          },
          { status: response.status }
        );
      }

      return NextResponse.json({ 
        success: true,
        message: 'Wiadomo≈õƒá zosta≈Ça wys≈Çana pomy≈õlnie!' 
      });
    } catch (fetchError) {
      console.error('B≈ÇƒÖd podczas komunikacji z Telegram API:', fetchError);
      const errorMessage = fetchError instanceof Error ? fetchError.message : String(fetchError);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
      if (errorMessage.includes('abort')) {
        return NextResponse.json(
          { error: 'Przekroczono limit czasu ≈ºƒÖdania - API Telegram nie odpowiada' },
          { status: 504 }
        );
      }
      
      return NextResponse.json(
        { 
          error: 'B≈ÇƒÖd wysy≈Çania wiadomo≈õci', 
          details: errorMessage 
        },
        { status: 500 }
      );
    }
    
  } catch (error) {
    console.error('B≈ÇƒÖd wysy≈Çania wiadomo≈õci:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Nie uda≈Ço siƒô wys≈Çaƒá wiadomo≈õci' },
      { status: 500 }
    );
  }
}
