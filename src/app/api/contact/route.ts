import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ .env.local, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
function getEnvVariables() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let botToken = process.env.TELEGRAM_BOT_TOKEN;
    let chatId = process.env.TELEGRAM_CHAT_ID;

    // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç placeholder –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, 
    // –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ .env.local –Ω–∞–ø—Ä—è–º—É—é
    if (!botToken || botToken.includes('your_bot_token_here') || !chatId) {
      console.log('–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ .env.local');
      
      // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env.local
      const envPath = path.resolve(process.cwd(), '.env.local');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
      if (fs.existsSync(envPath)) {
        const envContent = fs.readFileSync(envPath, 'utf8');
        const envLines = envContent.split('\n');
        
        // –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
        envLines.forEach(line => {
          if (line.startsWith('TELEGRAM_BOT_TOKEN=')) {
            botToken = line.split('=')[1].trim();
          }
          if (line.startsWith('TELEGRAM_CHAT_ID=')) {
            chatId = line.split('=')[1].trim();
          }
        });
        
        console.log('–ü—Ä–æ—á–∏—Ç–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local:', { 
          hasToken: !!botToken, 
          hasId: !!chatId 
        });
      } else {
        console.error('–§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }
    
    return { botToken, chatId };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', error);
    return { 
      botToken: process.env.TELEGRAM_BOT_TOKEN, 
      chatId: process.env.TELEGRAM_CHAT_ID 
    };
  }
}

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const { botToken: TELEGRAM_BOT_TOKEN, chatId: TELEGRAM_CHAT_ID } = getEnvVariables();

export async function POST(req: Request) {
  // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
    rawBotToken: TELEGRAM_BOT_TOKEN,
    rawChatId: TELEGRAM_CHAT_ID,
    hasBotToken: typeof TELEGRAM_BOT_TOKEN === 'string' && TELEGRAM_BOT_TOKEN.length > 0,
    hasChatId: typeof TELEGRAM_CHAT_ID === 'string' && TELEGRAM_CHAT_ID.length > 0,
    botTokenLength: TELEGRAM_BOT_TOKEN?.length,
    chatIdLength: TELEGRAM_CHAT_ID?.length,
    botTokenFirstChars: TELEGRAM_BOT_TOKEN?.substring(0, 3),
    isPlaceholder: TELEGRAM_BOT_TOKEN?.includes('your_bot_token_here')
  });

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      hasBotToken: !!TELEGRAM_BOT_TOKEN,
      hasChatId: !!TELEGRAM_CHAT_ID
    });
    return NextResponse.json(
      { error: 'Configuration error: Missing environment variables' },
      { status: 500 }
    );
  }

  try {
    const data = await req.json();
    const { name, phone, email, subject, message } = data;

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', {
      name,
      phone,
      email,
      subject,
      messageLength: message?.length
    });

    const text = `
üì® Nowa wiadomo≈õƒá ze strony:

üë§ Imiƒô i nazwisko: ${name}
üì± Telefon: ${phone || 'Nie podano'}
üìß Email: ${email}
üìù Temat: ${subject}

üí¨ Wiadomo≈õƒá:
${message}
    `;

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    console.log('URL Telegram API (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω):', telegramUrl);

    try {
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text,
          parse_mode: 'HTML',
        }),
      });

      const responseData = await response.json();
      console.log('–û—Ç–≤–µ—Ç Telegram API:', responseData);

      if (!response.ok) {
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:', {
          status: response.status,
          statusText: response.statusText,
          responseData
        });
        throw new Error(`Failed to send message: ${response.status} ${response.statusText} - ${JSON.stringify(responseData)}`);
      }

      return NextResponse.json({ 
        success: true,
        message: 'Wiadomo≈õƒá zosta≈Ça wys≈Çana pomy≈õlnie!'
      });
    } catch (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API:', fetchError);
      throw fetchError;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to send message' },
      { status: 500 }
    );
  }
}
